#
# Highly based on:
# https://github.com/sapegin/dotfiles/blob/dd063f9c30de7d2234e8accdb5272a5cc0a3388b/includes/bash_prompt.bash
#
# But adapted so it looks like more like:
# https://github.com/sindresorhus/pure
#
# Notes:
# - $local_username - username you don’t want to see in the prompt, if any
#

local_username= # currently empty
# Colors
GRAY="$(tput setaf 0)"
RED="$(tput setaf 1)"
GREEN="$(tput setaf 2)"
YELLOW="$(tput setaf 3)"
BLUE="$(tput setaf 4)"
MAGENTA="$(tput setaf 5)"
CYAN="$(tput setaf 6)"
WHITE="$(tput setaf 7)"
BOLD="$(tput bold)"
UNDERLINE="$(tput sgr 0 1)"
INVERT="$(tput sgr 1 0)"
NOCOLOR="$(tput sgr0)"

# User color
case $(id -u) in
  0) user_color="$RED" ;;  # root
	1000) user_color="$BLUE" ;; # first user
  *) user_color="$GREEN" ;;
esac

# Symbols
prompt_symbol="❯"
prompt_clean_symbol=""
prompt_dirty_symbol="*"
prompt_unpulled_symbol=" ⇣"
prompt_unpushed_symbol=" ⇡"
prompt_diverged_symbol=" ⇣⇡"

prompt_virtual_env_symbol="☁ "

function prompt_command() {
  # Local or SSH session?
  local remote=
  [ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ] && remote=1

  # Git branch name and work tree status (only when we are inside Git working tree)
  local git_prompt=
  if [[ "true" = "$(git rev-parse --is-inside-work-tree 2>/dev/null)" ]]; then
    # Branch name
    local branch="$(git symbolic-ref HEAD 2>/dev/null)"
    branch="${branch##refs/heads/}"

    # Working tree status (red when dirty)
    local dirty=
    # Modified files
    git diff --no-ext-diff --quiet --exit-code --ignore-submodules 2>/dev/null || dirty=1
    # Untracked files
    [ -z "$dirty" ] && test -n "$(git status --porcelain)" && dirty=1

    git_prompt=" $CYAN$branch"
    if [ -n "$dirty" ]; then
      git_prompt="$git_prompt$prompt_dirty_symbol"
    else
      git_prompt="$git_prompt$prompt_clean_symbol"
    fi

    # check whether branches are in sync
    git remote update > /dev/null 2>&1
    local local_status=$(git rev-parse @ 2>/dev/null)
    local remote_status=$(git rev-parse @{u} 2>/dev/null)
    local base_status=$(git merge-base @ @{u} 2>/dev/null)
    if [ $local_status = $remote_status ]; then
      git_prompt="$git_prompt$NOCOLOR"
    elif [ $local_status = $base_status ]; then
      git_prompt="$git_prompt$prompt_unpulled_symbol$NOCOLOR"
    elif [ $remote_status = $base_status ]; then
      git_prompt="$git_prompt$prompt_unpushed_symbol$NOCOLOR"
    else
      git_prompt="$git_prompt$prompt_diverged_symbol$NOCOLOR"
    fi

    # # Format Git info
    # if [ -n "$dirty" ]; then
    #   git_prompt=" $RED$branch$prompt_dirty_symbol$NOCOLOR"
    # else
    #   git_prompt=" $GRAY$branch$prompt_clean_symbol$NOCOLOR"
    # fi
  fi

  # Virtual env
  local virtual_env_prompt=
  if [ -n "$VIRTUAL_ENV" ]; then
    virtual_env_prompt=" $YELLOW$prompt_virtual_env_symbol$(basename $VIRTUAL_ENV)$NOCOLOR"
  fi

  # Only show username if not default
  local user_prompt=
  [ "$USER" != "$local_username" ] && user_prompt="$user_color$USER$NOCOLOR"

  # Show hostname inside SSH session
  local host_prompt=
  [ -n "$remote" ] && host_prompt="@$YELLOW$HOSTNAME$NOCOLOR"

  # Show delimiter if user or host visible
  local login_delimiter=
  [ -n "$user_prompt" ] || [ -n "$host_prompt" ] && login_delimiter=":"

  # Format prompt
  first_line="$user_prompt$host_prompt$login_delimiter$WHITE\w$NOCOLOR$git_prompt$virtual_env_prompt"
  # Text (commands) inside \[...\] does not impact line length calculation which fixes stange bug when looking through the history
  # $? is a status of last command, should be processed every time prompt prints
  second_line="\`if [ \$? = 0 ]; then echo \[\$BLUE\]; else echo \[\$RED\]; fi\`\$prompt_symbol\[\$NOCOLOR\] "
  PS1="\n$first_line\n$second_line"

  # Show command execution time
  BCTPostCommand

  # Multiline command
  PS2="\[$BLUE\]$prompt_symbol\[$NOCOLOR\] "

  # Terminal title
  local title="$(basename "$PWD")"
  [ -n "$remote" ] && title="$title \xE2\x80\x94 $HOSTNAME"
  echo -ne "\033]0;$title"; echo -ne "\007"
}
# Show awesome prompt only if Git is installed
command -v git >/dev/null 2>&1 && PROMPT_COMMAND=prompt_command
